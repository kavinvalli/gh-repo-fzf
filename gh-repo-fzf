#!/usr/bin/env bash
set -e

spin[0]="-"
spin[1]="\\"
spin[2]="|"
spin[3]="/"

user=$(gh api user -q .login)

QUERY='
  query($owner: String!, $endCursor: String) {
    repositoryOwner(login: $owner) {
      repositories(first: 100, after: $endCursor) {
        nodes { nameWithOwner }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  }
'

gh api graphql --paginate -F owner="${1:-$user}" -f query="${QUERY}" --jq '.data.repositoryOwner.repositories.nodes.[].nameWithOwner' > .repos.txt & PID=$!

echo "This may take a while. Please be patient while it runs"
printf "["
while kill -0 $PID 2>/dev/null; do
  # for i in "${spin[@]}"; do
  # echo -ne "\b$i"
  printf "â–“"
  sleep 0.5
  # done
done
printf "] done!\n"

repo=$(cat .repos.txt | fzf)
if [ -z $repo ]; then
  echo "Please choose a repository"
  exit 1
fi

option=$(echo "clone view fork archive" | tr " " "\n" | fzf)
if [ -z $option ]; then
  echo "Please choose an option"
  exit 1
fi

if [ $option = "clone" ]; then
  gh repo clone $repo
elif [ $option = "view" ]; then
  gh repo view $repo --web
elif [ $option = "fork" ]; then
  gh repo fork $repo
elif [ $option = "archive" ]; then
  gh repo archive $repo
fi
